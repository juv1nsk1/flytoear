import FireFly from "@hyperledger/firefly-sdk";
import bodyparser from "body-parser";
import express from "express";
import simplestorage from "../../solidity/artifacts/contracts/simple_storage.sol/SimpleStorage.json";
import token from "../../solidity/artifacts/contracts/token.sol/Token.json";
import config from "../config.json";
import { travel, image, special } from "../database.json";

const app = express();
const firefly = new FireFly({
  host: config.HOST,
  namespace: config.NAMESPACE,
});

const ssFfiName: string = `simpleStorageFFI-${config.VERSION}`;
//const ssFfiName: string = `simpleStorageFFI`;
const ssApiName: string = `simpleStorageApi-${config.VERSION}`;
//const ssApiName: string = `simpleStorageApi`;
// const tokenFfiName: string = `tokenFFI-${config.VERSION}`;
// const tokenApiName: string = `tokenApi-${config.VERSION}`;

const tokenFfiName: string = `tokenFFI`;
const tokenApiName: string = `tokenApi`;
const tokenFlyApiName: string = `MyFlightAPI`;
const tokenFlypApi: string = `FlypAPI`;
const baseURI = "http://localhost:3000/api/nft?destination=Paris&date=2025-03-12";

app.use(bodyparser.json());
async function mintToken(pool: string, to: string, amount: string): Promise<boolean> {
  try {
    firefly.mintTokens({
      pool,
      to,
      key: config.SIGNING_KEY,
      amount,
    });
  } catch (e: any) {
    console.error("Error minting token:", e);
    return false;
  }
  return true;
}

async function mintTokenByApi(apiName: string, to: string, uri: string): Promise<boolean> {
  try {
    await firefly.invokeContractAPI(apiName, "safeMint", {
      input: {
        to: to,
        uri: baseURI,
        amoutn: "1",
      },
      key: config.SIGNING_KEY,
    });
  } catch (e: any) {
    console.error("Error minting token API:", e);
    return false;
  }
  return true;
}
interface TravelRequestBody {
  confirmationCode: string;
  date: string;
  destination: string;
};

interface TravelDataResponse {
  uri: string;
  customer: string;
  error: string | null;
};

function getTravelData(req: TravelRequestBody): TravelDataResponse  {

  const filtered = travel.filter( (item) => item.code === req.confirmationCode && item.destination === req.destination);
  if (filtered.length === 0) {
    return {uri:"", customer:"", error: "No travel found" };
  }
  const imageFiltered = image.filter((item) => item.destination === req.destination);

  const monthYear = req.date.split("/")[0] + "/" + req.date.split("/")[2];
  const specialFiltered = special.filter((item) => item.destination === req.destination && item.date === monthYear);
  const imageUrl = specialFiltered.length > 0 ? specialFiltered[0].url : imageFiltered[0].url;
  const uri = "http://localhost:3000/api/nft?destination=" + req.destination.replace(/ /g, "%20") + "&date=" + req.date.replace(/\//g, "%2F") + "&image=" + imageUrl;
  
  return {uri:uri, customer:config.customer[filtered[0].customer], error: null};

}

app.post("/api/checkin", async (req, res) => {
 
  const {uri,customer,error} = getTravelData(req.body as TravelRequestBody);

  if (error) {
    return res.status(500).send({ error });
  }
  
  const statusPass = await mintTokenByApi(tokenFlypApi, customer, uri);
  const statusMiles = await mintToken("FLYM", customer, "1");
  const status = statusMiles&&statusPass ? 200 : 500;
  console.log("minted:", status);
  return res.status(status).send({}); 

});

app.get("/api/value", async (req, res) => {
  res.send(
    await firefly.queryContractAPI(ssApiName, "get", {
      key: config.SIGNING_KEY,
    })
  );
});

app.post("/api/value", async (req, res) => {
  console.log(req.body.x);
  try {
    const fireflyRes = await firefly.invokeContractAPI(ssApiName, "set", {
      input: {
        x: req.body.x,
      },
      key: config.SIGNING_KEY,
    });
    res.status(202).send({
      id: fireflyRes.id,
    });
    /* eslint-disable  @typescript-eslint/no-explicit-any */
  } catch (e: any) {
    res.status(500).send({
      error: e.message,
    });
  }
});

app.get("/api/nft", async (req, res) => {
  const { destination, date, image } = req.query;

  res.send({
    name: `Flight to ${destination}`,
    description: `Check-in on ${date} for your flight to ${destination}.`,
    image: image || `http://127.0.0.1/static/${(destination as string).toLowerCase()}.png`,
    attributes: [
      { trait_type: "Date", value: date },
      { trait_type: "Destination", value: destination },
    ],
  });
});

app.post("/api/mintflym", async (req, res) => {
  try {
    const fireflyRes = await firefly.mintTokens({
      pool: "FLYM",
      to: config.CUSTOMER_1_ADDRESS,

      key: config.SIGNING_KEY,
      amount: "1",
    });
    console.log("fireflyRes:", fireflyRes);

    res.status(202).send({
      tokenId: "1",
    });
    /* eslint-disable  @typescript-eslint/no-explicit-any */
  } catch (e: any) {
    res.status(500).send({
      error: e.message,
    });
  }
});

app.post("/api/mintflyp", async (req, res) => {
  console.log("req.body:", req.body);
  try {
    const fireflyRes = await firefly.invokeContractAPI(tokenFlypApi, "safeMint", {
      input: {
        to: config.CUSTOMER_1_ADDRESS,
        uri: baseURI,
        amoutn: "1",
      },
      key: config.SIGNING_KEY,
    });
    res.status(202).send({
      tokenId: fireflyRes.input.input.tokenId,
    });
    /* eslint-disable  @typescript-eslint/no-explicit-any */
  } catch (e: any) {
    res.status(500).send({
      error: e.message,
    });
  }
});

app.post("/api/mintTokenNFT", async (req, res) => {
  try {
    const fireflyRes = await firefly.invokeContractAPI(tokenApiName, "safeMint", {
      input: {
        tokenId: Number(req.body.tokenId),
      },
      key: config.SIGNING_KEY,
    });
    res.status(202).send({
      tokenId: fireflyRes.input.input.tokenId,
    });
    /* eslint-disable  @typescript-eslint/no-explicit-any */
  } catch (e: any) {
    res.status(500).send({
      error: e.message,
    });
  }
});

async function init() {
  // Simple storage
  await firefly
    .generateContractInterface({
      name: ssFfiName,
      namespace: config.NAMESPACE,
      version: "1.0",
      description: "Deployed simple-storage contract",
      input: {
        abi: simplestorage.abi,
      },
    })
    .then(async (ssGeneratedFFI) => {
      if (!ssGeneratedFFI) return;
      return await firefly.createContractInterface(ssGeneratedFFI, {
        confirm: true,
      });
    })
    .then(async (ssContractInterface) => {
      if (!ssContractInterface) return;
      return await firefly.createContractAPI(
        {
          interface: {
            id: ssContractInterface.id,
          },
          location: {
            address: config.SIMPLE_STORAGE_ADDRESS,
          },
          name: ssApiName,
        },
        { confirm: true }
      );
    })
    .catch((e) => {
      const err = JSON.parse(JSON.stringify(e.originalError));

      if (err.status === 409) {
        console.log("'simpleStorageFFI' already exists in FireFly. Ignoring.");
      } else {
        return;
      }
    });

  // const tokens = await firefly.getTokenBalances({
  //   pool: '3208bf31-6bac-4046-9ef1-9aa7028e1558',
  // });
  // console.log("tokens:", tokens);
  // runnning
  // const response = await firefly.invokeContractAPI(tokenFlyApiName, 'approve', {
  //   input: {
  //       to: "0xa5ce1f893b004c84f88db6786d3e9e951962acd6",
  //       tokenId: "6",
  //   },
  //   key: '0x08437bf8fb8147216475dfdf20895c1fafb12a64',           // the signing key (the token owner)
  // });

  // // runnning
  //     const responseTransfer = await firefly.invokeContractAPI(tokenFlyApiName, 'safeTransferFrom', {
  //       input: {
  //         "data": "0x0000",
  //         "from": "0x08437bf8fb8147216475dfdf20895c1fafb12a64",
  //         "to": "0xf96fca22679ea906e68ecb5bc9cfeb692627f6b4",
  //         "tokenId": "6"
  //       },
  //       key: config.SIGNING_KEY,           // the signing key (the token owner)
  //     });

  // const transferResponse = await firefly.invokeContractAPI({
  //   pool: 'POOLFLY',         // Your token pool ID or name
  //   from: "0x08437bf8fb8147216475dfdf20895c1fafb12a64", // Customer's wallet address (the token owner)
  //   to: "0xf96fca22679ea906e68ecb5bc9cfeb692627f6b4",        // Organization's wallet address
  //   tokenIndex: "5",                // For NFTs, specify the unique token ID
  //   key: "0x08437bf8fb8147216475dfdf20895c1fafb12a64",   // The signing key must match the 'from' identity
  // });

  // console.log("Transfer response:", transferResponse);

  // const identity = await firefly.createIdentity({
  //   name: "client_2",
  //   parent: "731b6749-b9c3-40da-880d-84e79c9499b6",
  //   key: "0x08437bf8fb8147216475dfdf20895c1fafb12a64",
  //   type: "custom",

  // });

  // console.log("identity:", identity);
  //     const identitiesList = await firefly.getIdentities(

  //     )

  //     console.log("identitiesList:", identitiesList);
  //    // console.log("identity:", identity);

  // Token
  await firefly
    .generateContractInterface({
      name: tokenFfiName,
      namespace: config.NAMESPACE,
      version: "1.0",
      description: "Deployed token contract",
      input: {
        abi: token.abi,
      },
    })
    .then(async (tokenGeneratedFFI) => {
      if (!tokenGeneratedFFI) return;
      return await firefly.createContractInterface(tokenGeneratedFFI, {
        confirm: true,
      });
    })
    .then(async (tokenContractInterface) => {
      if (!tokenContractInterface) return;
      return await firefly.createContractAPI(
        {
          interface: {
            id: tokenContractInterface.id,
          },
          location: {
            address: config.TOKEN_FLYP_ADDRESS,
          },
          name: tokenApiName,
        },
        { confirm: true }
      );
    })
    .catch((e) => {
      const err = JSON.parse(JSON.stringify(e.originalError));

      if (err.status === 409) {
        console.log("'tokenFFI' already exists in FireFly. Ignoring.");
      } else {
        return;
      }
    });

  // Listeners
  // Simple storage listener
  await firefly
    .createContractAPIListener(ssApiName, "Changed", {
      topic: "changed",
    })
    .catch((e) => {
      const err = JSON.parse(JSON.stringify(e.originalError));

      if (err.status === 409) {
        console.log("Simple storage 'changed' event listener already exists in FireFly. Ignoring.");
      } else {
        console.log(`Error creating listener for simple_storage "changed" event: ${err.message}`);
      }
    });
  // Token listener
  await firefly
    .createContractAPIListener(tokenApiName, "Transfer", {
      topic: "transfer",
    })
    .catch((e) => {
      const err = JSON.parse(JSON.stringify(e.originalError));

      if (err.status === 409) {
        console.log("Token 'transfer' event listener already exists in FireFly. Ignoring.");
      } else {
        console.log(`Error creating listener for token "transfer" event: ${err.message}`);
      }
    });

  // Token listener
  await firefly
    .createContractAPIListener(tokenFlyApiName, "Transfer FLY", {
      topic: "transfer",
    })
    .catch((e) => {
      const err = JSON.parse(JSON.stringify(e.originalError));

      if (err.status === 409) {
        console.log("Token 'transfer' event listener already exists in FireFly. Ignoring.");
      } else {
        console.log(`Error creating listener for token "transfer" event: ${err.message}`);
      }
    });

  firefly.listen(
    {
      filter: {
        events: "blockchain_event_received",
      },
    },
    async (socket, event) => {
      console.log(`${event.blockchainEvent?.info.signature}: ${JSON.stringify(event.blockchainEvent?.output, null, 2)}`);
    }
  );

  // Start listening
  app.listen(config.PORT, () => console.log(`Kaleido DApp backend listening on port ${config.PORT}!`));
}

init().catch((err) => {
  console.error(err.stack);
  process.exit(1);
});

module.exports = {
  app,
};
